// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: account/v1/account.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountServiceLogin = "/apis.account.v1.AccountService/Login"
const OperationAccountServiceProfile = "/apis.account.v1.AccountService/Profile"

type AccountServiceHTTPServer interface {
	Login(context.Context, *emptypb.Empty) (*LoginReply, error)
	Profile(context.Context, *emptypb.Empty) (*Account, error)
}

func RegisterAccountServiceHTTPServer(s *http.Server, srv AccountServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/profile", _AccountService_Profile0_HTTP_Handler(srv))
	r.POST("/login", _AccountService_Login0_HTTP_Handler(srv))
}

func _AccountService_Profile0_HTTP_Handler(srv AccountServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountServiceProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Profile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Account)
		return ctx.Result(200, reply)
	}
}

func _AccountService_Login0_HTTP_Handler(srv AccountServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

type AccountServiceHTTPClient interface {
	Login(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LoginReply, err error)
	Profile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Account, err error)
}

type AccountServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountServiceHTTPClient(client *http.Client) AccountServiceHTTPClient {
	return &AccountServiceHTTPClientImpl{client}
}

func (c *AccountServiceHTTPClientImpl) Login(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountServiceHTTPClientImpl) Profile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Account, error) {
	var out Account
	pattern := "/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountServiceProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
